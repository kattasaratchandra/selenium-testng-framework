please refer to the following notes for the code implementation:

- Introduced a `BaseTest` abstract class to centralize WebDriver setup and teardown using
TestNG annotations.
- Implemented a `Driver` utility class to manage WebDriver initialization and cleanup,
ensuring browser sessions are handled per test.
- Added a `DriverManager` class using `ThreadLocal<WebDriver>` for thread-safe driver
management, supporting parallel test execution.
- Used `final` for test classes and utility classes (`Driver`, `DriverManager`) to
prevent inheritance and enforce immutability.
- Defined private constructors in utility classes to prevent instantiation.
- Created simple, final test classes (`GoogleHomePageTest`, `GoogleLoginPageTest`)
that extend `BaseTest` and contain only test logic.
- Configured `testng.xml` for parallel method execution to leverage thread-local
WebDriver instances.

FrameworkConstants.java
  - Stores all important file paths (like the config file) as constants in one place.
  - Marked as `final` to prevent inheritance, so no other class can extend it.
  - Has a private constructor to prevent instantiation, ensuring it is only used as a utility class.
  - This design enforces immutability and consistent usage of constants across the framework.

ReadPropertyFile.java:
  - Loads all settings from the config file once at startup.
  - Stores settings in a fast-access map for quick retrieval.
  - Throws clear errors if a requested setting does not exist.
  - Uses logging for better traceability and debugging.

ExplicitWaitFactory.java:
 - Centralizes explicit wait logic for different WaitStrategy types.
 - Improves code reuse and reliability by abstracting wait conditions.
 - Throws an exception for invalid strategies, ensuring robustness.

WaitStrategy.java & ConfigProperties.java:
 - Defines enums for wait strategies and configuration properties.
 - Improves type safety and code clarity by using enums instead of strings.
 - Makes the code more maintainable and less error-prone.

DataProviderTest.java demonstrates multiple ways to provide test data to TestNG test methods using
the @DataProvider annotation:
 - It includes a method-specific data provider (dataProviderMethod) that supplies hardcoded data
 based on the test method name, allowing different parameter sets for different tests.
 - It features an Excel-based data provider (excelDataProvider) that reads tabular test
 data from an external Excel file and supplies it as a two-dimensional array, making it easy to manage and update test data externally.
 - It also provides a map-based Excel data provider (excelDataProviderMap) that returns
 each row as a HashMap, enabling key-value access to test data for improved readability and flexibility in test methods.
 - Includes a JSON-based data provider (jsonDataProvider) that reads test data from a JSON file and supplies it as a HashMap,
 allowing structured and flexible test data management.
 - Provides a properties file data provider (propertiesDataProvider) that loads key-value pairs from a .properties file into
 a HashMap, supporting simple configuration-driven tests.

 Listeners:
 - Listeners (Listeners.java): Implements ITestListener and ISuiteListener to log test and suite events (start, success,
   failure, finish). Useful for custom logging, reporting, or actions on test events.
 - IMethodInterceptor (IMethodInterceptor.java): Implements IMethodInterceptor to control which test methods are run
   and how many times. Used to modify the test execution order or repeat specific tests.
 - AnnotationTransformers (AnnotationTransformers.java): Implements IAnnotationTransformer to modify test
   annotations at runtime. Here, it sets a retry analyzer for specific test methods, enabling automatic retries
   on failure.
 - TestRetry (TestRetry.java): Implements IRetryAnalyzer to define retry logic for failed tests. Specifies how
   many times a failed test should be retried before marking it as failed. Used in combination with AnnotationTransformers.
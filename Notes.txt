please refer to the following notes for the code implementation:

- Introduced a `BaseTest` abstract class to centralize WebDriver setup and teardown using
TestNG annotations.
- Implemented a `Driver` utility class to manage WebDriver initialization and cleanup,
ensuring browser sessions are handled per test.
- Added a `DriverManager` class using `ThreadLocal<WebDriver>` for thread-safe driver
management, supporting parallel test execution.
- Used `final` for test classes and utility classes (`Driver`, `DriverManager`) to
prevent inheritance and enforce immutability.
- Defined private constructors in utility classes to prevent instantiation.
- Created simple, final test classes (`GoogleHomePageTest`, `GoogleLoginPageTest`)
that extend `BaseTest` and contain only test logic.
- Configured `testng.xml` for parallel method execution to leverage thread-local
WebDriver instances.

FrameworkConstants.java
  - Stores all important file paths (like the config file) as constants in one place.
  - Marked as `final` to prevent inheritance, so no other class can extend it.
  - Has a private constructor to prevent instantiation, ensuring it is only used as a utility class.
  - This design enforces immutability and consistent usage of constants across the framework.

ReadPropertyFile.java:
  - Loads all settings from the config file once at startup.
  - Stores settings in a fast-access map for quick retrieval.
  - Throws clear errors if a requested setting does not exist.
  - Uses logging for better traceability and debugging.

ExplicitWaitFactory.java:
 - Centralizes explicit wait logic for different WaitStrategy types.
 - Improves code reuse and reliability by abstracting wait conditions.
 - Throws an exception for invalid strategies, ensuring robustness.

WaitStrategy.java & ConfigProperties.java:
 - Defines enums for wait strategies and configuration properties.
 - Improves type safety and code clarity by using enums instead of strings.
 - Makes the code more maintainable and less error-prone.

DataProviderTest.java demonstrates multiple ways to provide test data to TestNG test methods using
the @DataProvider annotation:
 - It includes a method-specific data provider (dataProviderMethod) that supplies hardcoded data
 based on the test method name, allowing different parameter sets for different tests.
 - It features an Excel-based data provider (excelDataProvider) that reads tabular test
 data from an external Excel file and supplies it as a two-dimensional array, making it easy to manage and update test data externally.
 - It also provides a map-based Excel data provider (excelDataProviderMap) that returns
 each row as a HashMap, enabling key-value access to test data for improved readability and flexibility in test methods.
 - Includes a JSON-based data provider (jsonDataProvider) that reads test data from a JSON file and supplies it as a HashMap,
   allowing structured and flexible test data management.
 - Provides a properties file data provider (propertiesDataProvider) that loads key-value pairs from a .properties file into
   a HashMap, supporting simple configuration-driven tests.

 Listeners:
 - Listeners (Listeners.java): Implements ITestListener and ISuiteListener to log test and suite events (start, success,
   failure, finish). Useful for custom logging, reporting, or actions on test events.
 - IMethodInterceptor (IMethodInterceptor.java): Implements IMethodInterceptor to control which test methods are run
   and how many times. Used to modify the test execution order or repeat specific tests in run time.
 - IMethodInterceptor purpose is to filter or modify the list of test methods before they are executed.
   It can be used to skip certain tests, change their order, or repeat them based on specific conditions.
 - AnnotationTransformers (AnnotationTransformers.java): Implements IAnnotationTransformer to modify test
   annotations at runtime. Here, it sets a retry analyzer for specific test methods, enabling automatic retries
   on failure.
 - TestRetry (TestRetry.java): Implements IRetryAnalyzer to define retry logic for failed tests. Specifies how
   many times a failed test should be retried before marking it as failed. Used in combination with AnnotationTransformers.

 Extent reports:
 - for extent reports we have to do some configuration before use, please check extentreportsDemo class.
 - we create two methods init and flush for creating and flushing the extent instance. we use this methods in listeners
   to create and flush the extent instance.
 - To avoid parallel execution issues we create extent test instance as thread local.
 - similar to driver how we perform null checks before creating,  we create for extent instance as well. if called twice from anywhere
   in test methods it helps.
 - created extent logger and used it everywhere for more readability instead of extent test. and keep methods to just
   pass, fail and skip
 - we keep reporting related independent of tests. such that we log in reusable actions methods instead of in test
   methods.
 - using listeners we config extent report, we use extent logger class method to log actions, we keep all this
   independent of tests

 Extent reports path:
- we created dynamic report file name using the current date and time, ensuring that each test run generates a
    unique report file.
- getExtentReportPath() in FrameworkConstants.java provides the file path where the Extent report will be generated.
   It uses the overrideReports property from the config file to decide whether to overwrite the report file or create
   a new one with a timestamp for each run.


 Extent reports screenshots using base64 image encoding:
- created overloaded methods in ExtentLogger class to log screenshots in the report.
- These methods accept a base64 encoded string of the screenshot image, allowing
  for easy embedding of images in the report.
- Overloaded methods like pass(String message, Boolean isScreenshotNeeded) allow logging
  with or without screenshots.
- If isScreenshotNeeded is true and the corresponding config property
  (e.g., passedEachStepsScreenshots) is set to yes in config.properties, a screenshot is
  captured and attached to the report.
- If either is false/not yes, only the message is logged, no screenshot.
- Screenshots are captured as base64 strings for easy embedding in the Extent report.
- This approach gives fine-grained control over when screenshots are included, based on both
  runtime logic and configuration.

 Adding Failed tests Exceptions to Extent Report:
 - Extent Logger class has method fail. we send message as argument to this method. this message we
   can use to log exception and stack trace of the failed test.
 - using Result.getThrowable().toString method able to add the exception message to the extent report.
 - using result.getThrowable().getStackTrace() method able to add the stack trace to the extent report.
 - used extent logger fail method in listeners on test failure method, to log the exception and stack trace.

IMethodInterceptor:
- IMethodInterceptor is used to control the execution of test methods in TestNG. these methods are stored in
  a list, and we can modify this list before the test methods are executed, using override method
- It allows us to filter, reorder, or repeat test methods dynamically at runtime.

IAnnotation transformer and IRetry analyzer:
- IAnnotationTransformer is used to modify test annotations at runtime. It allows us to set a retry analyzer
  for specific test methods, enabling automatic retries on failure.
- IRetryAnalyzer is used to define retry logic for failed tests. It specifies how many times a failed
  test should be retried before marking it as failed.